package com.gamebuster19901.excite.bot.database.sql;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import com.gamebuster19901.excite.bot.database.Column;
import com.gamebuster19901.excite.bot.database.Result;
import com.gamebuster19901.excite.bot.database.Table;

public class PreparedStatement implements java.sql.PreparedStatement {

	private final java.sql.PreparedStatement parent;
	
	public PreparedStatement(java.sql.PreparedStatement parent) {
		if(parent == null) {
			throw new Error();
		}
		this.parent = parent;
	}
	
	public void setValues(Object... values) throws SQLException {
		setValues(1, values);
	}
	
	public void setValues(int offset, Object... values) throws SQLException {
		for(int i = offset; i < values.length + 1; i++) {
			Table.insertValue(this, i, values[i - 1]);
		}
	}
	
	@Deprecated
	public java.sql.PreparedStatement getParent() {
		return parent;
	}
	
	@Override
	public String toString() {
		return parent.toString();
	}
	
	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return new ResultSet(parent.executeQuery(sql));
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return parent.executeUpdate();
	}

	@Override
	public void close() throws SQLException {
		new Exception(this.hashCode() + "").printStackTrace();
		parent.close();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return parent.getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		parent.setMaxFieldSize(max);
	}

	@Override
	public int getMaxRows() throws SQLException {
		return parent.getMaxRows();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		parent.setMaxRows(max);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		parent.setEscapeProcessing(enable);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return parent.getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		parent.setQueryTimeout(seconds);
	}

	@Override
	public void cancel() throws SQLException {
		parent.cancel();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return parent.getWarnings();
	}

	@Override
	public void clearWarnings() throws SQLException {
		parent.clearWarnings();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		parent.setCursorName(name);
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return parent.execute(sql);
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return new ResultSet(parent.getResultSet());
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return parent.getUpdateCount();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return parent.getMoreResults();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		parent.setFetchDirection(direction);
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return parent.getFetchDirection();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		parent.setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return parent.getFetchSize();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return parent.getResultSetConcurrency();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return parent.getResultSetType();
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		parent.addBatch(sql);
	}

	@Override
	public void clearBatch() throws SQLException {
		parent.clearBatch();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return parent.executeBatch();
	}

	@Override
	public Connection getConnection() throws SQLException {
		return parent.getConnection();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return parent.getMoreResults();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return new ResultSet(parent.getGeneratedKeys());
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return parent.executeUpdate(sql, autoGeneratedKeys);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return parent.executeUpdate(sql, columnIndexes);
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return parent.executeUpdate(sql, columnNames);
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return parent.execute(sql, autoGeneratedKeys);
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return parent.execute(sql, columnIndexes);
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return parent.execute(sql, columnNames);
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return parent.getResultSetHoldability();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return parent.isClosed();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		parent.setPoolable(poolable);
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return parent.isPoolable();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		parent.closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return parent.isCloseOnCompletion();
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return parent.unwrap(iface);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return parent.isWrapperFor(iface);
	}

	@Override
	@Deprecated
	public ResultSet executeQuery() throws Error {
		throw new Error("Unresolved compilation problem: Calling unimplemented method executeQuery(). Use execute() instead.");
	}
	
	public Result query() throws SQLException {
		return new Result(new ResultSet(parent.executeQuery()));
	}

	@Override
	public int executeUpdate() throws SQLException {
		return parent.executeUpdate();
	}

	@Override
	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		parent.setNull(parameterIndex, sqlType);
	}

	@Override
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		parent.setBoolean(parameterIndex, x);
	}

	@Override
	public void setByte(int parameterIndex, byte x) throws SQLException {
		parent.setByte(parameterIndex, x);
	}

	@Override
	public void setShort(int parameterIndex, short x) throws SQLException {
		parent.setShort(parameterIndex, x);
	}

	@Override
	public void setInt(int parameterIndex, int x) throws SQLException {
		parent.setInt(parameterIndex, x);
	}

	@Override
	public void setLong(int parameterIndex, long x) throws SQLException {
		parent.setLong(parameterIndex, x);
	}

	@Override
	public void setFloat(int parameterIndex, float x) throws SQLException {
		parent.setFloat(parameterIndex, x);
	}

	@Override
	public void setDouble(int parameterIndex, double x) throws SQLException {
		parent.setDouble(parameterIndex, x);
	}

	@Override
	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		parent.setBigDecimal(parameterIndex, x);
	}

	@Override
	@Deprecated
	public void setString(int parameterIndex, String x) throws SQLException {
		parent.setString(parameterIndex, x);
	}
	
	public void setString(int parameterIndex, Column column) throws SQLException {
		setString(parameterIndex, column.toString());
	}

	@Override
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		parent.setBytes(parameterIndex, x);
	}

	@Override
	public void setDate(int parameterIndex, Date x) throws SQLException {
		parent.setDate(parameterIndex, x);
	}

	@Override
	public void setTime(int parameterIndex, Time x) throws SQLException {
		parent.setTime(parameterIndex, x);
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		parent.setTimestamp(parameterIndex, x);
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		parent.setAsciiStream(parameterIndex, x, length);
	}

	@Override
	@Deprecated
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		parent.setUnicodeStream(parameterIndex, x, length);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		parent.setBinaryStream(parameterIndex, x, length);
	}

	@Override
	public void clearParameters() throws SQLException {
		parent.clearParameters();
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		parent.setObject(parameterIndex, x, targetSqlType);
	}

	@Override
	public void setObject(int parameterIndex, Object x) throws SQLException {
		parent.setObject(parameterIndex, x);
	}

	@Override
	public boolean execute() throws SQLException {
		return parent.execute();
	}

	@Override
	public void addBatch() throws SQLException {
		parent.addBatch();
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		parent.setCharacterStream(parameterIndex, reader, length);
	}

	@Override
	public void setRef(int parameterIndex, Ref x) throws SQLException {
		parent.setRef(parameterIndex, x);
	}

	@Override
	public void setBlob(int parameterIndex, Blob x) throws SQLException {
		parent.setBlob(parameterIndex, x);
	}

	@Override
	public void setClob(int parameterIndex, Clob x) throws SQLException {
		parent.setClob(parameterIndex, x);
	}

	@Override
	public void setArray(int parameterIndex, Array x) throws SQLException {
		parent.setArray(parameterIndex, x);
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return parent.getMetaData();
	}

	@Override
	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		parent.setDate(parameterIndex, x, cal);
	}

	@Override
	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		parent.setTime(parameterIndex, x, cal);
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		parent.setTimestamp(parameterIndex, x, cal);
	}

	@Override
	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		parent.setNull(parameterIndex, sqlType, typeName);
	}

	@Override
	public void setURL(int parameterIndex, URL x) throws SQLException {
		parent.setURL(parameterIndex, x);
	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return parent.getParameterMetaData();
	}

	@Override
	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		parent.setRowId(parameterIndex, x);
	}

	@Override
	public void setNString(int parameterIndex, String value) throws SQLException {
		parent.setNString(parameterIndex, value);
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		parent.setNCharacterStream(parameterIndex, value, length);
	}

	@Override
	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		parent.setNClob(parameterIndex, value);
	}

	@Override
	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		parent.setClob(parameterIndex, reader, length);
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		parent.setBlob(parameterIndex, inputStream, length);
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		parent.setNClob(parameterIndex, reader, length);
	}

	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
		parent.setSQLXML(parameterIndex, xmlObject);
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
		parent.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		parent.setAsciiStream(parameterIndex, x, length);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		parent.setBinaryStream(parameterIndex, x, length);
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		parent.setCharacterStream(parameterIndex, reader, length);
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		parent.setAsciiStream(parameterIndex, x);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		parent.setBinaryStream(parameterIndex, x);
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		parent.setCharacterStream(parameterIndex, reader);
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		parent.setNCharacterStream(parameterIndex, value);
	}

	@Override
	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		parent.setClob(parameterIndex, reader);
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		parent.setBlob(parameterIndex, inputStream);
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		parent.setNClob(parameterIndex, reader);
	}

}
